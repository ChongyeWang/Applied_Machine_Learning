}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "/Users/chongyewang/Documemnts/svm_light/svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "/Users/chongyewang/Documemnts/svm_light/svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "/Users/chongyewang/Documemnts/svm_light/svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "/Users/chongyewang/Documemnts/svm_light/svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "/Users/chongyewang/Documemnts/svm_light/svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "/Users/chongyewang/Desktop/hw1/svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "/Users/chongyewang/Desktop/hw1/svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svm_learn(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "/Users/chongyewang/Desktop/hw1/svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svmlight(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "/Users/chongyewang/Documents/svm_light/svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
#read data from csv file
data <- read.csv(file="/Users/chongyewang/Desktop/hw1/pima-indians-diabetes.csv", header=FALSE, sep=",")
#transfer from Dataframe to matrix
matrix_data <- data.matrix(data)
############### Part D ###############
for(i in 1:nrow(matrix_data)){
for(j in 1:8){
if((j == 3 || j == 4 || j == 6 || j == 8) && matrix_data[i, j] == 0){
matrix_data[i, j] <- NA
}
}
}
for(i in c(3, 4, 6, 8)){
sum <- 0
num <- 0
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == FALSE){
sum <- sum + matrix_data[j, i]
num <- num + 1
}
}
mean_val = sum / num
print(mean_val)
for(j in 1:nrow(matrix_data)){
if(is.na(matrix_data[j, i]) == TRUE){
matrix_data[j, i] <- mean_val
}
}
}
#run 10 times of data
times <- 10
for (i in 1: times){
#shuffle the data
shuffled_data = data[sample(nrow(matrix_data)),]
#get the size of data
data_size <- nrow(data)
#training size: 80% of data size
training_size <- as.integer(data_size * 0.8)
#Use svm light to train data
svm <- svm_learn(matrix_data[1:training_size ,1:8], matrix_data[1:training_size ,9], "/Users/chongyewang/Documents/svm_light/svm_light.tar.gz")
accuracy = predict(svm, matrix_data[training_size + 1 ,1:8], scal = TRUE)
print(accuracy)
}
